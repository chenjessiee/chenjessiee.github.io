<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>LeetCode刷题day2</title>
    <link href="/2024/11/13/LeetCode%E5%88%B7%E9%A2%98day2/"/>
    <url>/2024/11/13/LeetCode%E5%88%B7%E9%A2%98day2/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode刷题day2"><a href="#LeetCode刷题day2" class="headerlink" title="LeetCode刷题day2"></a>LeetCode刷题day2</h1><h3 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977.有序数组的平方"></a>977.有序数组的平方</h3><p>已解答</p><p>简单</p><p>相关标签</p><p>相关企业</p><p>给你一个按 <strong>非递减顺序</strong> 排序的整数数组 <code>nums</code>，返回 <strong>每个数字的平方</strong> 组成的新数组，要求也按 <strong>非递减顺序</strong> 排序。</p><p><strong>示例 1：</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：nums = [-<span class="hljs-number">4</span>,-<span class="hljs-number">1,0,3,10</span>]<br>输出：[<span class="hljs-number">0,1,9,16</span>,<span class="hljs-number">100</span>]<br>解释：平方后，数组变为 [<span class="hljs-number">16,1,0,9</span>,<span class="hljs-number">100</span>]<br>排序后，数组变为 [<span class="hljs-number">0,1,9,16</span>,<span class="hljs-number">100</span>]<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：nums = [-<span class="hljs-number">7</span>,-<span class="hljs-number">3,2,3,11</span>]<br>输出：[<span class="hljs-number">4,9,9,49</span>,<span class="hljs-number">121</span>]<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 104</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li><li><code>nums</code> 已按 <strong>非递减顺序</strong> 排序</li></ul><p><strong>进阶：</strong></p><ul><li>请你设计时间复杂度为 <code>O(n)</code> 的算法解决本问题</li></ul><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">sortedSquares</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-comment">//双指针，控制时间复杂度在O(N)</span><br>        <span class="hljs-type">int</span> n=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-comment">//vector&lt;int&gt; ans[n];//have propblem 不能这样声明</span><br>        <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">ans</span><span class="hljs-params">(n)</span></span>;<br>        <span class="hljs-type">int</span> pos=n<span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j=n<span class="hljs-number">-1</span>;i&lt;=j;)&#123;<br>            <span class="hljs-keyword">if</span>(nums[i]*nums[i]&gt;nums[j]*nums[j])&#123;<br>                ans[pos--]=nums[i]*nums[i];<br>                i++;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                ans[pos--]=nums[j]*nums[j];<br>                j--;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a>27. 移除元素</h3><p>已解答</p><p>简单</p><p>相关标签</p><p>相关企业</p><p>提示</p><p>给你一个数组 <code>nums</code> 和一个值 <code>val</code>，你需要 <strong><a href="https://baike.baidu.com/item/%E5%8E%9F%E5%9C%B0%E7%AE%97%E6%B3%95">原地</a></strong> 移除所有数值等于 <code>val</code> 的元素。元素的顺序可能发生改变。然后返回 <code>nums</code> 中与 <code>val</code> 不同的元素的数量。</p><p>假设 <code>nums</code> 中不等于 <code>val</code> 的元素数量为 <code>k</code>，要通过此题，您需要执行以下操作：</p><ul><li>更改 <code>nums</code> 数组，使 <code>nums</code> 的前 <code>k</code> 个元素包含不等于 <code>val</code> 的元素。<code>nums</code> 的其余元素和 <code>nums</code> 的大小并不重要。</li><li>返回 <code>k</code>。</li></ul><p><strong>用户评测：</strong></p><p>评测机将使用以下代码测试您的解决方案：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span><span class="hljs-literal">[]</span> nums = [...]; <span class="hljs-comment">// 输入数组</span><br><span class="hljs-built_in">int</span> <span class="hljs-keyword">val</span> = ...; <span class="hljs-comment">// 要移除的值</span><br><span class="hljs-built_in">int</span><span class="hljs-literal">[]</span> expectedNums = [...]; <span class="hljs-comment">// 长度正确的预期答案。</span><br>                            <span class="hljs-comment">// 它以不等于 val 的值排序。</span><br><br><span class="hljs-built_in">int</span> k = removeElement(nums, <span class="hljs-keyword">val</span>); <span class="hljs-comment">// 调用你的实现</span><br><br><span class="hljs-keyword">assert</span> k<span class="hljs-operator"> == </span>expectedNums.length;<br>sort(nums, <span class="hljs-number">0</span>, k); <span class="hljs-comment">// 排序 nums 的前 k 个元素</span><br><span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; actualLength; i++) &#123;<br>    <span class="hljs-keyword">assert</span> nums[i]<span class="hljs-operator"> == </span>expectedNums[i];<br>&#125;<br></code></pre></td></tr></table></figure><p>如果所有的断言都通过，你的解决方案将会 <strong>通过</strong>。</p><p><strong>示例 1：</strong></p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs haxe">输入：nums = [<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>], val = <span class="hljs-number">3</span><br>输出：<span class="hljs-number">2</span>, nums = [<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-literal">_</span>,<span class="hljs-literal">_</span>]<br>解释：你的函数函数应该返回 k = <span class="hljs-number">2</span>, 并且 nums 中的前两个元素均为 <span class="hljs-number">2</span>。<br>你在返回的 k 个元素之外留下了什么并不重要（因此它们并不计入评测）。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dns">输入：nums = [<span class="hljs-number">0,1,2,2</span>,<span class="hljs-number">3,0,4,2</span>], val = <span class="hljs-number">2</span><br>输出：<span class="hljs-number">5</span>, nums = [<span class="hljs-number">0,1,4,0</span>,<span class="hljs-number">3</span>,_,_,_]<br>解释：你的函数应该返回 k = <span class="hljs-number">5</span>，并且 nums 中的前五个元素为 <span class="hljs-number">0,0,1,3</span>,<span class="hljs-number">4</span>。<br>注意这五个元素可以任意顺序返回。<br>你在返回的 k 个元素之外留下了什么并不重要（因此它们并不计入评测）。<br></code></pre></td></tr></table></figure><h3 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">removeElement</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> val)</span> </span>&#123;<br>        <span class="hljs-type">int</span> j=nums.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-type">int</span> k=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;j;)&#123;<br>               <span class="hljs-keyword">if</span>(nums[i]==val)&#123;<br>                k++;<br>                nums[i]=nums[j<span class="hljs-number">-1</span>];<br>                j--;<br>                <br>            &#125;<br>            <span class="hljs-keyword">else</span> i++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> j;<span class="hljs-comment">//有点粗心，返回值这里，返回的k,搞了很久，无语</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704.二分查找"></a>704.二分查找</h3><p>给定一个 <code>n</code> 个元素有序的（升序）整型数组 <code>nums</code> 和一个目标值 <code>target</code> ，写一个函数搜索 <code>nums</code> 中的 <code>target</code>，如果目标值存在返回下标，否则返回 <code>-1</code>。</p><p><strong>示例 1:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: nums = [-1,0,3,5,9,12], target = 9</span><br><span class="hljs-section">输出: 4</span><br><span class="hljs-section">解释: 9 出现在 nums 中并且下标为 4</span><br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: nums = [-1,0,3,5,9,12], target = 2</span><br><span class="hljs-section">输出: -1</span><br><span class="hljs-section">解释: 2 不存在 nums 中因此返回 -1</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ol><li>你可以假设 <code>nums</code> 中的所有元素是不重复的。</li><li><code>n</code> 将在 <code>[1, 10000]</code>之间。</li><li><code>nums</code> 的每个元素都将在 <code>[-9999, 9999]</code>之间。</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums, <span class="hljs-type">int</span> target)</span> </span>&#123;<br>        <span class="hljs-type">int</span> mid = nums.<span class="hljs-built_in">size</span>() / <span class="hljs-number">2</span>;<span class="hljs-comment">//这样写，注意不用-1</span><br>        <span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = nums.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//int mid = (l + r) / 2;//先算lr,后m，这样会好点＜（＾－＾）＞</span><br>        <br>        <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">if</span> (nums[mid] &lt; target) &#123;<br>                l = mid + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target)<br>                r = mid - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-keyword">return</span> mid;<br><br>            mid = (l + r) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (l &gt; r)<span class="hljs-comment">//是可以相等的</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode刷题day1</title>
    <link href="/2024/11/12/LeetCode%E5%88%B7%E9%A2%98day1/"/>
    <url>/2024/11/12/LeetCode%E5%88%B7%E9%A2%98day1/</url>
    
    <content type="html"><![CDATA[<h1 id="LeetCode刷题day1"><a href="#LeetCode刷题day1" class="headerlink" title="LeetCode刷题day1"></a>LeetCode刷题day1</h1><h2 id="LCR-095-最长公共子序列"><a href="#LCR-095-最长公共子序列" class="headerlink" title="LCR 095. 最长公共子序列"></a>LCR 095. 最长公共子序列</h2><p>给定两个字符串 <code>text1</code> 和 <code>text2</code>，返回这两个字符串的最长 <strong>公共子序列</strong> 的长度。如果不存在 <strong>公共子序列</strong> ，返回 <code>0</code> 。</p><p>一个字符串的 <strong>子序列</strong> 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。</p><ul><li>例如，<code>&quot;ace&quot;</code> 是 <code>&quot;abcde&quot;</code> 的子序列，但 <code>&quot;aec&quot;</code> 不是 <code>&quot;abcde&quot;</code> 的子序列。</li></ul><p>两个字符串的 <strong>公共子序列</strong> 是这两个字符串所共同拥有的子序列。</p><p><strong>示例 1：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">text1</span> = <span class="hljs-string">&quot;abcde&quot;</span>, <span class="hljs-attr">text2</span> = <span class="hljs-string">&quot;ace&quot;</span> <br>输出：<span class="hljs-number">3</span>  <br>解释：最长公共子序列是 <span class="hljs-string">&quot;ace&quot;</span> ，它的长度为 <span class="hljs-number">3</span> 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">text1</span> = <span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-attr">text2</span> = <span class="hljs-string">&quot;abc&quot;</span><br>输出：<span class="hljs-number">3</span><br>解释：最长公共子序列是 <span class="hljs-string">&quot;abc&quot;</span> ，它的长度为 <span class="hljs-number">3</span> 。<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">text1</span> = <span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-attr">text2</span> = <span class="hljs-string">&quot;def&quot;</span><br>输出：<span class="hljs-number">0</span><br>解释：两个字符串没有公共子序列，返回 <span class="hljs-number">0</span> 。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= text1.length, text2.length &lt;= 1000</code></li><li><code>text1</code> 和 <code>text2</code> 仅由小写英文字符组成。</li></ul><h3 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h3><p>这是一道动态规划题，LCS，它不要求连续，只要求顺序，这有点像最长字串问题，但是，是否感觉更有意思？</p><p><img src="/img/LeetCode%E5%88%B7%E9%A2%98day1/image-20241112163520255.png" alt="image-20241112163520255"></p><p><code>s1 = &quot;abcde&quot;, s2 = &quot;ace&quot; </code></p><h4 id="1-定义：D-i-j-定义为s1前i个字符-与-s2前j个字符的LCS。"><a href="#1-定义：D-i-j-定义为s1前i个字符-与-s2前j个字符的LCS。" class="headerlink" title="1. 定义：D[i][j]定义为s1前i个字符 与 s2前j个字符的LCS。"></a>1. 定义：<code>D[i][j]</code>定义为s1前i个字符 与 s2前j个字符的LCS。</h4><h4 id="2-分解：从最终状态往前推演。"><a href="#2-分解：从最终状态往前推演。" class="headerlink" title="2. 分解：从最终状态往前推演。"></a>2. 分解：从最终状态往前推演。</h4><p>①末尾能匹配上：<code>D[i][j] = 1 +D[i-1][j-1] </code></p><p><img src="/img/LeetCode%E5%88%B7%E9%A2%98day1/image-20241112170917096.png" alt="image-20241112170917096"></p><p>②末尾不能匹配上： 丢掉<code>s1</code>末尾：<code>D[i][j] = D[i-1][j] </code></p><pre><code class="hljs">                丢掉`s2`末尾：`D[i][j] = D[i][j-1] `</code></pre><p>谁效果好留下谁。即：<code>D[i][j] = max( D[i][j-1], D[i][j-1]) </code></p><h4 id="3-子问题"><a href="#3-子问题" class="headerlink" title="3.子问题"></a>3.子问题</h4><ul><li>D<sub>00</sub> &#x3D; 0</li><li>D<sub>0j</sub> &#x3D; 0</li><li>D<sub>i0</sub> &#x3D;0</li></ul><p><img src="/img/LeetCode%E5%88%B7%E9%A2%98day1/image-20241112173022008.png" alt="image-20241112173022008"></p><p><img src="/img/LeetCode%E5%88%B7%E9%A2%98day1/image-20241112175727148.png" alt="image-20241112175727148"></p><h3 id="上代码："><a href="#上代码：" class="headerlink" title="上代码："></a>上代码：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-comment">//注意i,j对应问题</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">longestCommonSubsequence</span><span class="hljs-params">(string s1, string s2)</span> </span>&#123;<br>        <span class="hljs-type">int</span> d[<span class="hljs-number">1000</span>][<span class="hljs-number">1000</span>];<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">1000</span>;i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">1000</span>;j++)<br>            d[i][j]=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> LCS=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=s<span class="hljs-number">1.l</span>ength();i++) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=s<span class="hljs-number">2.l</span>ength();j++) &#123;<br>            <span class="hljs-keyword">if</span>(s1[i<span class="hljs-number">-1</span>]==s2[j<span class="hljs-number">-1</span>]) &#123;<span class="hljs-comment">//i-1，j-1</span><br>                d[i][j]=d[i<span class="hljs-number">-1</span>][j<span class="hljs-number">-1</span>]<span class="hljs-number">+1</span>;<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                d[i][j]= <span class="hljs-built_in">max</span>(d[i<span class="hljs-number">-1</span>][j],d[i][j<span class="hljs-number">-1</span>]);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(LCS&lt;d[i][j]) &#123;<br>                LCS=d[i][j];<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> LCS;<span class="hljs-comment">//找到最大值，其实右下角，一定是最大值</span><br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="416-分割等和子集"><a href="#416-分割等和子集" class="headerlink" title="416. 分割等和子集"></a>416. 分割等和子集</h2><p>给你一个 <strong>只包含正整数</strong> 的 <strong>非空</strong> 数组 <code>nums</code> 。请你判断是否可以将这个数组分割成两个子集，使得两个子集的元素和相等。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[1,5,11,5]</span><br>输出：true<br>解释：数组可以分割成 <span class="hljs-comment">[1, 5, 5]</span> 和 <span class="hljs-comment">[11]</span> 。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">nums</span> = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>]<br>输出：<span class="hljs-literal">false</span><br>解释：数组不能分割成两个元素和相等的子集。<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 200</code></li><li><code>1 &lt;= nums[i] &lt;= 100</code></li></ul><h3 id="分析：-1"><a href="#分析：-1" class="headerlink" title="分析："></a>分析：</h3><p>这就是个01背包问题。</p><h4 id="什么是01背包问题？"><a href="#什么是01背包问题？" class="headerlink" title="什么是01背包问题？"></a>什么是01背包问题？</h4><p><img src="/img/LeetCode%E5%88%B7%E9%A2%98day1/image-20241112175443947.png" alt="image-20241112175443947"><br><img src="/img/LeetCode%E5%88%B7%E9%A2%98day1/image.png" alt="image-20241112175705064"></p><p><img src="/img/LeetCode%E5%88%B7%E9%A2%98day1/image-20241112175705064.png" alt="image-20241112175705064"></p><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>本题就是把数组一分为二，且是均分。因此，如果数组累加和为奇数，肯定不行。注意题目的范围，注意调整。</p><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">canPartition</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>        <span class="hljs-type">int</span> c=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.<span class="hljs-built_in">size</span>(); i++)<br>            c+=nums[i];<br>        <span class="hljs-keyword">if</span>(c%<span class="hljs-number">2</span>!=<span class="hljs-number">0</span>)<span class="hljs-comment">//先排除一部分</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span> ;    <br>        c/=<span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span> m=c<span class="hljs-number">+3</span>;<br>        <span class="hljs-type">int</span> d[<span class="hljs-number">201</span>][m];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">201</span>;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;m;j++)<span class="hljs-comment">//注意界限，直接开大数组，容易超时</span><br>            <span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>||j==<span class="hljs-number">0</span>)<br>            d[i][j]=<span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= nums.<span class="hljs-built_in">size</span>(); i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;=c ; j++) &#123;<br>                <span class="hljs-keyword">if</span>(nums[i<span class="hljs-number">-1</span>]&gt;j)&#123;<span class="hljs-comment">//can&#x27;t，直接放不进去</span><br>                    d[i][j]=d[i<span class="hljs-number">-1</span>][j];<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    d[i][j]=<span class="hljs-built_in">max</span>(nums[i<span class="hljs-number">-1</span>]+d[i<span class="hljs-number">-1</span>][j-nums[i<span class="hljs-number">-1</span>]],d[i<span class="hljs-number">-1</span>][j]);<br>                &#125;<br>            &#125;<br>        &#125;<br>         <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=nums.<span class="hljs-built_in">size</span>();i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=c;j++)<br>            <span class="hljs-keyword">if</span>(d[i][j]==c)<span class="hljs-comment">//d[i][j]装的就是数字和，也就是value价值，就是c；通俗讲，d[i][j]求出的就是能拿进背包的数字，他们的价值=1/2全部，剩下的自然也是1/2全部</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>markdown-DEMO</title>
    <link href="/2024/11/12/markdown-DEMO/"/>
    <url>/2024/11/12/markdown-DEMO/</url>
    
    <content type="html"><![CDATA[<p>记笔记调格式，忘了的话，来看看demo<br><a href="https://markdown-it.github.io/">https://markdown-it.github.io/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Google学术搜索镜像网站</title>
    <link href="/2024/11/06/Google%E5%AD%A6%E6%9C%AF%E6%90%9C%E7%B4%A2%E9%95%9C%E5%83%8F%E7%BD%91%E7%AB%99/"/>
    <url>/2024/11/06/Google%E5%AD%A6%E6%9C%AF%E6%90%9C%E7%B4%A2%E9%95%9C%E5%83%8F%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<p>服务器ip被谷歌学术禁了，无法访问，原因不清楚；找个镜像网站查查论文吧，汗流浃背了，科研路上一路打怪。<br><a href="https://ac.scmor.com/">https://ac.scmor.com/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Github+hexo搭建博客详细记录</title>
    <link href="/2024/11/05/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/"/>
    <url>/2024/11/05/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p><strong>全部搭建过程参考文章：</strong><a href="https://blog.csdn.net/yaorongke/article/details/119089190"><strong>https://blog.csdn.net/yaorongke/article/details/119089190</strong></a></p><p>SSH设置：<a href="https://github.com/pengwenwu/skill-tree/blob/master/Hexo/hexo%20%2B%20github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B.md">https://github.com/pengwenwu/skill-tree/blob/master/Hexo/hexo%20%2B%20github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B.md</a></p><h3 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a><strong>一、准备工作</strong></h3><h4 id="1-注册GitHub账号"><a href="#1-注册GitHub账号" class="headerlink" title="1.   注册GitHub账号"></a><strong>1.</strong>   <strong>注册GitHub账号</strong></h4><p>首先需要有一个GitHub账号，没有的话到先到GitHub官网注册（<a href="https://github.com/%EF%BC%89%E3%80%82">https://github.com/）。</a></p><p>注册可参考GitHub申请账号教程<a href="https://blog.csdn.net/yaorongke/article/details/119086305">https://blog.csdn.net/yaorongke/article/details/119086305</a></p><h4 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2. 安装Git"></a><strong>2.</strong> <strong>安装Git</strong></h4><p>在自己电脑上安装好Git，hexo部署到GitHub时要用。参考 Git安装(网址：<a href="https://blog.csdn.net/yaorongke/article/details/119085413?fromshare=blogdetail&sharetype=blogdetail&sharerId=119085413&sharerefer=PC&sharesource=weixin_62431476&sharefrom=from_link">https://blog.csdn.net/yaorongke/article/details/119085413?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=119085413&amp;sharerefer=PC&amp;sharesource=weixin_62431476&amp;sharefrom=from_link</a>)</p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/image1.png" alt=" "></p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/image2.png" alt=" "></p><h4 id="3-安装NodeJS"><a href="#3-安装NodeJS" class="headerlink" title="3. 安装NodeJS"></a><strong>3.</strong> <strong>安装NodeJS</strong></h4><p>在自己电脑上安装好NodeJS，Hexo是基于NodeJS编写的，所以需要安装NodeJS和npm工具。可参考NodeJS安装及配置(Windows)——</p><p><a href="https://blog.csdn.net/yaorongke/article/details/119084295?fromshare=blogdetail&sharetype=blogdetail&sharerId=119084295&sharerefer=PC&sharesource=weixin_62431476&sharefrom=from_link">https://blog.csdn.net/yaorongke/article/details/119084295?fromshare=blogdetail&amp;sharetype=blogdetail&amp;sharerId=119084295&amp;sharerefer=PC&amp;sharesource=weixin_62431476&amp;sharefrom=from_link</a></p><p>我的安装具体步骤：</p><h5 id="（1）下载安装包"><a href="#（1）下载安装包" class="headerlink" title="（1）下载安装包"></a><strong>（1）下载安装包</strong></h5><p>NodeJS官网下载地址：<a href="https://nodejs.org/zh-cn/download/">https://nodejs.org/zh-cn/download/</a></p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/image3.png" alt=" "><br>下载安装包后双击安装包开始安装，一路点击Next即可，安装完成后，msi格式的安装包会自动添加环境变量。</p><p>安装finish后打开cmd，执行命令node -v查看node版本</p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/image4.png" alt=" "></p><p>在安装node的同时也安装了npm，执行 npm -v 查看npm版本</p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/image5.png" alt=" "></p><p>成功查看后就安装完成可以正常使用了，参考文章内还有讲解修改全局包配置，但我不需要这个所以省略后半部分，有需要可访问步骤3的网址。</p><h3 id="二、创建仓库"><a href="#二、创建仓库" class="headerlink" title="二、创建仓库"></a><strong>二、创建仓库</strong></h3><p><strong>1.</strong> 在GitHub上<strong>创建一个新的代码仓库</strong>用于保存我们的网页。点击<strong>Your repositories</strong>，进入仓库页面。</p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/image6.png" alt=" "><br><strong>2.</strong> <strong>点击New</strong>按钮，进入仓库创建页面。</p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/7.png" alt=" "></p><p><strong>3.</strong> <strong>填写仓库名</strong>（必须与用户名一致），格式必须为&lt;用户名&gt;.github.io，然后点击Create repository。</p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/8.png" alt=" "></p><p> <strong>4.</strong> <strong>点击creating a new file</strong>创建一个新文件，作为我们网站的主页。</p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/9.png" alt=" "><br><strong>5.</strong> <strong>新文件的名字必须为index.html</strong>，内容先随便写一个简单的，填写之后点击Commit new file提交。</p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/10.png" alt=" "><br>填写内容示例如下：</p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/11.png" alt=" "><br><strong>6.</strong> 在仓库页面，从上方导航栏<strong>进入“Settings”-“Pages”</strong>,找到主页的地址，示例为 <a href="https://yaorongke.github.io/">https://yaorongke.github.io/</a></p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/12.png" alt=" "><br><strong>7.</strong> 接下来直接访问查询到的主页地址<a href="https://yaorongke.github.io/%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E4%B8%80%E4%B8%AA%E6%AF%94%E8%BE%83%E7%AE%80%E9%99%8B%E7%9A%84%E7%BD%91%E9%A1%B5%EF%BC%9A">https://yaorongke.github.io/，可以看到一个比较简陋的网页：</a></p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/13.png" alt=" "></p><h3 id="三、安装Hexo"><a href="#三、安装Hexo" class="headerlink" title="三、安装Hexo"></a><strong>三、安装Hexo</strong></h3><p>Hexo 是一个基于NodeJS的静态博客网站生成器，使用Hexo不需开发，只要进行一些必要的配置即可生成一个个性化的博客网站，非常方便。Hexo官网<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></p><h4 id="1-安装hexo"><a href="#1-安装hexo" class="headerlink" title="1.   安装hexo"></a><strong>1.</strong>   <strong>安装hexo</strong></h4><p>注意，<strong>第一个坑来了！</strong>——自行创建一个WorkSpace-blog目录，在该目录下安装hexo，安装hexo命令以官网为准npm install hexo-cli -g，参考文章内的命令不知道为啥不可用，归结为坑（bushi）</p><p><code>npm install hexo-cli -g</code></p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/14.png" alt=" "></p><ol start="2"><li>安装成功后查看版本</li></ol><p><code>hexo -v</code></p><ol start="3"><li>创建一个项目 hexo-blog 并初始化，</li></ol><p><code>hexo init blog</code></p><p><code>cd blog</code></p><p><code>npm install</code></p><ol start="4"><li>本地启动</li></ol><p><code>hexo g</code></p><p><code>hexo server</code></p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/15.png" alt=" "><br>这里有个踩过的坑：</p><p>启动失败了，原因是<strong>4000端口被占用</strong>，使用hexo s -p 8080命令<strong>更换端口</strong>.( 启动时需要在hexo-blog目录下)以自己的目录为准。</p><p>​                 更换为8080端口即可成功启动                </p><p>​                 启动失败，4000端口被占用                </p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/16.png" alt=" "></p><h3 id="四、更换主题"><a href="#四、更换主题" class="headerlink" title="四、更换主题"></a><strong>四、更换主题</strong></h3><h4 id="1-下载Fluid主题"><a href="#1-下载Fluid主题" class="headerlink" title="1. 下载Fluid主题"></a><strong>1.</strong> 下载Fluid主题</h4><p>  进入<a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid官网</a>安装主题，<strong>点击“最新 release 版本”</strong>下滑找到<strong>“Assets”</strong>部分。</p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/17.png" alt=" "></p><p>下载压缩包并解压到 “hexo-blog” – “themes” 目录，并将解压出的文件夹<strong>重命名为 fluid</strong><br><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/18.png" alt=" "></p><h4 id="2-指定主题"><a href="#2-指定主题" class="headerlink" title="2.   指定主题"></a><strong>2.</strong>   <strong>指定主题</strong></h4><p>如下修改hexo-blog目录中的 _config.yml文件的them和language（用vscode软件打开hexo-blog目录会非常好修改，后续需要执行的命令行也可以直接在vscode终端执行）：</p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/19.png" alt=" "></p><p>我的vscode修改界面：<br><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/20.png" alt=" "></p><ol start="3"><li><h4 id="创建「关于页」"><a href="#创建「关于页」" class="headerlink" title="创建「关于页」"></a><strong>创建「关于页」</strong></h4></li></ol><p>首次使用主题的「关于页」需要<strong>手动创建</strong>：</p><p><code>hexo new page about</code></p><p>创建成功后，编辑博客目录下 &#x2F;source&#x2F;about&#x2F;index.md，<strong>添加 layout 属性</strong>。</p><p>修改后的文件示例如下：<br><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/21.png" alt=" "></p><h3 id="五、发布到GitHub-Pages"><a href="#五、发布到GitHub-Pages" class="headerlink" title="五、发布到GitHub Pages"></a><strong>五、发布到GitHub Pages</strong></h3><h4 id="1-安装hexo-deployer-git"><a href="#1-安装hexo-deployer-git" class="headerlink" title="1.   安装hexo-deployer-git"></a><strong>1.</strong>   <strong>安装hexo-deployer-git</strong></h4><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/22.png" alt=" "></p><ol start="2"><li>修改 hexo-blog目录下的config.yml，配置 GitHub 相关信息</li></ol><p>坑！</p><p>配置.yml文件时，<strong>注意空格！！！</strong>否则报错</p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/23.png" alt=" "></p><p>接下来两个推送方式：</p><p>（1）参考文章内（如下）的配置方式部署不知道为什么一直没成功，放弃了。。。。。<br><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/24.png" alt=" "></p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/25.png" alt=" "><br>这个问题暂时没解决，推送换了ssh连接</p><p>（2）换成ssh推送继续往下肝，这里开始参考开头提到的第二篇文章：[**<a href="https://github.com/pengwenwu/skill-tree/blob/master/Hexo/hexo%20%2B%20github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B.md**]">https://github.com/pengwenwu/skill-tree/blob/master/Hexo/hexo%20%2B%20github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B.md**]</a>(<a href="https://github.com/pengwenwu/skill-tree/blob/master/Hexo/hexo">https://github.com/pengwenwu/skill-tree/blob/master/Hexo/hexo</a> %2B github搭建个人博客教程.md)</p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/26.png" alt=" "><br><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/27.png" alt=" "><br>以上步骤非常清晰，浅提几个点：</p><p>l  一开始没有.ssh目录，执行了命令ssh-keygen -t rsa -C “my email”命令，这里我是在c:&#x2F;用户&#x2F;username&#x2F;目录下执行的，生成完成后用记事本打开id_ras.pub文件，然后Ctrl-A复制所有内容。</p><p>l  接下来的github-&gt;头像-&gt;Settings→SSH kyes→Add SSH key，粘贴复制的内容。对应图片放这里：<br><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/28.png" alt=" "></p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/29.png" alt=" "></p><p>l  最后的url配置的就是步骤二-7中的主页地址</p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/30.png" alt=" "></p><p>l  repo的内容在仓库页面-code-SSH可以直接复制<br><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/31.png" alt=" "></p><p>l  全部修改完配置保存后执行hexo g -d，部署完成后就可以打开主页：</p><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/32.png" alt=" "></p><hr><p>再附上之前我自己写的注意事项，记录点东西确实还是能帮上忙哦！</p><ol><li>Node下载，注意看是否直接下载安装程序，压缩包还不会使用。</li><li>在npm运行，就是Node，下载好了cmd到folder，执行npm命令就行。</li><li>注意.ignore文件，否则上传一大堆。</li><li>github分支很重要，默认执行分支main，这就会出现部署到master分支，本地能成功执行hexo，但是github访问不到，去setting切换分支即可。<br><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/image.png" alt=" "></li><li>github pages没有实时更改内容是很正常的，发布前先<code>hexo s -p 8080</code>，本地执行没问题，先使用 <code>hexo clean</code> 清除本地缓存，然后<code>hexo g -d</code>提交。</li><li>新建文章很简单，<code>hexo new name</code> 即可。</li><li>发布照片时，要把生成的照片文件夹放到source下的img静态资源文件夹，养成良好习惯，放在post里面无法访问。</li></ol><p><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/37.png" alt=" "></p><ol start="8"><li>稍微有一些地方没设置成功，都无法访问。今天的情况是，都部署成功了，githubPages能看得到第一篇文章，但是后续发布的文章一直没法看到，github代码也显示push成功。出了什么问题呢？确保 GitHub Pages 设置正确：</li></ol><p>在仓库的 Settings &gt; Pages 中，设置发布来源为 GitHub Actions 自动生成的文件。直接上图，真的shit，好在终于成功啦！<br><img src="/img/Github-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E8%AF%A6%E7%BB%86%E8%AE%B0%E5%BD%95/38.png" alt=" "></p><hr><p>以上是我帮ie家族一员Winnie配置时遇到的问题，尽管9月份我已经配置过了，苦于没有留下详细的说明文档，导致这次踩坑很多还是要不停搜索。于是我们两人决定写一份说明文档，当然，这份保姆级别教程要感谢Winnie~  Jessie主要是技术支持哈哈哈。Winnie会来看我的主页吗，不知道，祝她找工作顺利！可爱善良的女孩呀，幸福会来敲门的！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>提交新文章注意事项</title>
    <link href="/2024/11/05/%E6%8F%90%E4%BA%A4%E6%96%B0%E6%96%87%E7%AB%A0%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <url>/2024/11/05/%E6%8F%90%E4%BA%A4%E6%96%B0%E6%96%87%E7%AB%A0%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<p>突然考虑到，万一我本地源码炸了怎么办？那就直接备份一手吧，有备无患。</p><h2 id="开局报错："><a href="#开局报错：" class="headerlink" title="开局报错："></a>开局报错：</h2><p><img src="/img/%E6%8F%90%E4%BA%A4%E6%96%B0%E6%96%87%E7%AB%A0%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/image.png" alt="图片引用方法二"></p><h2 id="先去解决一下："><a href="#先去解决一下：" class="headerlink" title="先去解决一下："></a>先去解决一下：</h2><p>在本仓库，新建了一个分支blog，里面存放源码，操作步骤如下：<br>要将代码推送到 Git 仓库，以下是常规的步骤：</p><h3 id="1-确认本地仓库已初始化"><a href="#1-确认本地仓库已初始化" class="headerlink" title="1. 确认本地仓库已初始化"></a>1. 确认本地仓库已初始化</h3><p>确保你的项目已经初始化为一个 Git 仓库，并且目录中有 <code>.git</code> 文件夹。如果还没有初始化，可以运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br></code></pre></td></tr></table></figure><h3 id="2-添加远程仓库地址"><a href="#2-添加远程仓库地址" class="headerlink" title="2. 添加远程仓库地址"></a>2. 添加远程仓库地址</h3><p>如果还没有设置远程仓库，需要将远程仓库地址添加到本地仓库。你可以用以下命令将仓库的 <code>origin</code> 设置为远程仓库地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add origin &lt;仓库地址&gt;<br></code></pre></td></tr></table></figure><p>例如，使用 GitHub 上的仓库地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote add origin https://github.com/your-username/your-repo.git<br></code></pre></td></tr></table></figure><h3 id="3-切换到新分支"><a href="#3-切换到新分支" class="headerlink" title="3. 切换到新分支"></a>3. 切换到新分支</h3><p>创建新分支后，你可以使用 git checkout &lt;分支名&gt; 切换到该分支<br>查看分支<br>git branch</p><h3 id="4-添加文件并提交更改"><a href="#4-添加文件并提交更改" class="headerlink" title="4. 添加文件并提交更改"></a>4. 添加文件并提交更改</h3><p>将文件添加到暂存区并提交更改： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .<br>git commit -m <span class="hljs-string">&quot;提交信息&quot;</span><br></code></pre></td></tr></table></figure><h3 id="4-推送到远程仓库"><a href="#4-推送到远程仓库" class="headerlink" title="4. 推送到远程仓库"></a>4. 推送到远程仓库</h3><p>将代码推送到远程仓库的指定分支（通常是 <code>main</code> 或 <code>master</code> 分支）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push -u origin main<br></code></pre></td></tr></table></figure><blockquote><p><code>-u</code> 选项会将本地分支与远程分支关联，以后推送时只需运行 <code>git push</code>。</p></blockquote><h3 id="5-后续推送"><a href="#5-后续推送" class="headerlink" title="5. 后续推送"></a>5. 后续推送</h3><p>之后的更改只需执行以下命令即可推送：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .<br>git commit -m <span class="hljs-string">&quot;更新信息&quot;</span><br>git push<br></code></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>如果远程仓库有更新的代码，在推送之前先拉取最新代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull origin main<br></code></pre></td></tr></table></figure><p>推送完成后，你可以在远程仓库中查看提交的代码。<br><img src="/img/%E6%8F%90%E4%BA%A4%E6%96%B0%E6%96%87%E7%AB%A0%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/image1.png" alt="alt text"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode-169.多数元素</title>
    <link href="/2024/11/05/LeetCode-169-%E5%A4%9A%E6%95%B0%E5%85%83%E7%B4%A0/"/>
    <url>/2024/11/05/LeetCode-169-%E5%A4%9A%E6%95%B0%E5%85%83%E7%B4%A0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>如何科学上网</title>
    <link href="/2024/11/04/%E5%A6%82%E4%BD%95%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    <url>/2024/11/04/%E5%A6%82%E4%BD%95%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/</url>
    
    <content type="html"><![CDATA[<p>一、下载代理</p><ol><li>v2rayN or clash<br><img src="/img/%E5%A6%82%E4%BD%95%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/image.png" alt="alt text"><br>v2rayN 官网：<a href="https://getv2rayn.com/">https://getv2rayn.com/</a><br>下载地址：<a href="https://dl.p6p.net/v2rayN/">https://dl.p6p.net/v2rayN/</a><br><img src="/img/%E5%A6%82%E4%BD%95%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/image1.png" alt="alt text"><br>二、购买网络<br>性价比机场：<br><a href="https://性价比机场.com/#/knowledge">https://xn--6nq44r2uh9rhj7f.com/#/knowledge</a><br>注册邮箱（国内qq邮箱可用），登录购买后follow教程即可<br><img src="/img/%E5%A6%82%E4%BD%95%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/image2.png" alt="alt text"><br>三、安装教程配置 </li><li>按照网页教程配置 </li><li>v2rayN无法连接注意要设置默认跳过证书验证！<br><img src="/img/%E5%A6%82%E4%BD%95%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/image3.png" alt="alt text"></li></ol><p>升级版：自己搭建服务器，还没学哈哈</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>主定理的一个疑问</title>
    <link href="/2024/11/04/%E4%B8%BB%E5%AE%9A%E7%90%86%E7%9A%84%E4%B8%80%E4%B8%AA%E7%96%91%E9%97%AE/"/>
    <url>/2024/11/04/%E4%B8%BB%E5%AE%9A%E7%90%86%E7%9A%84%E4%B8%80%E4%B8%AA%E7%96%91%E9%97%AE/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/%E4%B8%BB%E5%AE%9A%E7%90%86%E7%9A%84%E4%B8%80%E4%B8%AA%E7%96%91%E9%97%AE/image.png" alt="图片引用方法二"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode-435.无重叠区间</title>
    <link href="/2024/11/04/LeetCode-435-%E6%97%A0%E9%87%8D%E5%8F%A0%E5%8C%BA%E9%97%B4/"/>
    <url>/2024/11/04/LeetCode-435-%E6%97%A0%E9%87%8D%E5%8F%A0%E5%8C%BA%E9%97%B4/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode-321.拼接最大数</title>
    <link href="/2024/11/04/LeetCode-321-%E6%8B%BC%E6%8E%A5%E6%9C%80%E5%A4%A7%E6%95%B0/"/>
    <url>/2024/11/04/LeetCode-321-%E6%8B%BC%E6%8E%A5%E6%9C%80%E5%A4%A7%E6%95%B0/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode-53.最大子数组和</title>
    <link href="/2024/11/04/LeetCode-53-%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/"/>
    <url>/2024/11/04/LeetCode-53-%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84%E5%92%8C/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>latex使用记录</title>
    <link href="/2024/10/31/latex%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <url>/2024/10/31/latex%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<ol><li>参考文献<br>在tex同级目录添加.bib文件，其中填写引用格式的bibtex<br>1.1 在导言部分加<br>\usepackage{cite}  &#x2F;&#x2F;引用要加的包<br>\usepackage[hidelinks]{hyperref} &#x2F;&#x2F;去掉引用效果绿框和链接跳转<br>\usepackage[numbers,sort&amp;compress]{natbib}&#x2F;&#x2F;多个文献引用</li></ol><p>多文献引用格式:[1,2].   \cite{label1,label2}</p><p>多文献引用格式:[1,2][1-3]只有是三片文献以上才是连字符.  \usepackage[numbers,sort&amp;compress]{natbib}我所知道的是这是一种压缩的格式.</p><p>1.2 在参考文献出现的位置<br>\bibliographystyle{unsrt} &#x2F;&#x2F;按出现顺序编号参考文献<br>\bibliography{ref}&#x2F;&#x2F;导入刚才的bib文件</p><ol start="2"><li>图片跨栏居中<br>方法：使用 figure* 环境<br>在双栏文档中，将 figure 环境替换为 figure*，并将浮动参数设为 [t] 或 [b]，以控制图片出现在页面顶部或底部。</li></ol><p>\begin{figure*}[t] % 使用 figure* 环境，并设置 [t] 或 [b] 控制位置<br>    \centering<br>    \includegraphics[width&#x3D;\textwidth]{your-image.png} % 设置图片宽度为整页宽度<br>    \caption{Your Caption}<br>    \label{fig:your-label}<br>\end{figure*}</p><ol start="3"><li>图片索引居中<br>\usepackage[caption&#x3D;true,font&#x3D;normalsize,labelfont&#x3D;sf,textfont&#x3D;sf]{subfig}<br>模板默认是false<br>caption&#x3D;true改成true就行了</li></ol><p>Tip:有时会出现编译不成功的问题，只要在空白的地方随便打打即可重新编译成功；照片的位置好像不能指定；照片可以在label重新命名。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>数据集自动标注</title>
    <link href="/2024/10/24/%E6%95%B0%E6%8D%AE%E9%9B%86%E8%87%AA%E5%8A%A8%E6%A0%87%E6%B3%A8/"/>
    <url>/2024/10/24/%E6%95%B0%E6%8D%AE%E9%9B%86%E8%87%AA%E5%8A%A8%E6%A0%87%E6%B3%A8/</url>
    
    <content type="html"><![CDATA[<p>任务1：Anaconda配置</p><ol><li><p>Anaconda下载，选择适合自己操作系统的版本。清华镜像：<a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/</a></p></li><li><p>安装Anaconda，并确保在安装过程中将Anaconda添加到系统环境变量中</p></li><li><p>验证Anaconda是否安装成功，在终端（或Anaconda Prompt）中运行以下命令并记录输出，输出应有版本号：<br> conda –version</p></li></ol><p>任务2：X-Anylabeling自动标注软件安装<br>参考博客<a href="https://blog.csdn.net/2303_80018785/article/details/139429062">https://blog.csdn.net/2303_80018785/article/details/139429062</a><br>注意，后续在命令行中，下载包时，不要开代理。</p><p>使用方法：</p><ol><li>打开 Anaconda prompt,电脑搜索即可</li><li>输入<br>conda activate label<br>cd C:\X-AnyLabeling-main     （改成你所用的地址）<br>python anylabeling&#x2F;app.py</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>快捷生成方法</title>
    <link href="/2024/09/18/%E5%BF%AB%E6%8D%B7%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/"/>
    <url>/2024/09/18/%E5%BF%AB%E6%8D%B7%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="前端学习时Coding快捷方法"><a href="#前端学习时Coding快捷方法" class="headerlink" title="前端学习时Coding快捷方法"></a>前端学习时Coding快捷方法</h1><h4 id="快速生成HTML结构语法"><a href="#快速生成HTML结构语法" class="headerlink" title="快速生成HTML结构语法"></a>快速生成HTML结构语法</h4><ol><li>生成标签 直接输入标签名 按tab键即可 比如 div 然后tab键 ，就可以生成<div></div></li><li>如果想要生成多个相同标签 加上<em>就可以了比如 div</em>3 就可以快速生成3个div2.</li><li>如果有父子级关系的标签，可以用&gt;比如 u&gt;li就可以了</li><li>如果有兄弟关系的标签，用 + 就可以了 比如 div+p4</li><li>如果生成带有类名或者id名字的，直接写demo 或者 #two tab 键就可以了</li><li>如果生成的div类名是有顺序的，可以用自增符号 $</li><li>如果想要在生成的标签内部写内容可以用{}表示</li></ol><h4 id="CSS-基本采取简写形式即可"><a href="#CSS-基本采取简写形式即可" class="headerlink" title="CSS 基本采取简写形式即可"></a>CSS 基本采取简写形式即可</h4><ol><li>比如 w200 按tab 可以生成 width: 200px;</li><li>比如lh26 按tab 可以生成 line-height: 26px;</li></ol><h4 id="VS"><a href="#VS" class="headerlink" title="VS"></a>VS</h4><ol><li><p>vs保存自动格式化：左下角管理，设置，用户 文本编辑器 格式化</p></li><li><p>shift+alt+上下键快速复制粘贴一行代码</p></li></ol><h4 id="链接伪类选择器注意事项"><a href="#链接伪类选择器注意事项" class="headerlink" title="链接伪类选择器注意事项"></a>链接伪类选择器注意事项</h4><ol><li>为了确保生效，请按LVHA的循顺序声明:link-:visited-:hover-:active。</li><li>记忆法 :love hate 或者 Iv 包包 hao</li><li>因为a链接在浏览器中具有默认样式，所以我们实际工作中都需要给链接单独指定样式。<br><img src="/img/%E5%BF%AB%E6%8D%B7%E7%94%9F%E6%88%90%E6%96%B9%E6%B3%95/test.png" alt="链接器总结"></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Chrome调试</title>
    <link href="/2024/09/18/Chrome%E8%B0%83%E8%AF%95/"/>
    <url>/2024/09/18/Chrome%E8%B0%83%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h2 id="F12打开Chrome调试界面"><a href="#F12打开Chrome调试界面" class="headerlink" title="F12打开Chrome调试界面"></a>F12打开Chrome调试界面</h2><ol><li>Ctrl+滚轮，可以放大开发者工具代码大小。</li><li>左边是 HTML元素结构，右边是 CSS 样式。</li><li>右边 CSS 样式可以改动数值(左右箭头或者直接输入)和查看颜色，</li><li>Ctrl +0 复原浏览器大小。</li><li>如果点击元素，发现右侧没有样式引入，极有可能是类名或者样式引入错误如果有样式，但是样式前面有黄色叹号提示，则是样式属性书写错误。</li></ol><p><img src="/img/Chrome%E8%B0%83%E8%AF%95/test.png" alt="Chrome示例"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>最近的打算</title>
    <link href="/2024/09/12/%E6%9C%80%E8%BF%91%E7%9A%84%E6%89%93%E7%AE%97/"/>
    <url>/2024/09/12/%E6%9C%80%E8%BF%91%E7%9A%84%E6%89%93%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<h2 id="Jessie最近在干啥？"><a href="#Jessie最近在干啥？" class="headerlink" title="Jessie最近在干啥？"></a>Jessie最近在干啥？</h2><p>  刚开学不久，花了两天的时间搭建好了自己的博客hexo+github，这篇文章才算是真正意义上的第一篇记录。搭建这个东西，真正是从无到有，搭建的过程学到了很多知识。下载VScode, Node.js, Git。学会使用git命令，真正自己搭了一个github仓库。有几个坑：</p><ol><li>Node下载，注意看是否直接下载安装程序，压缩包还不会使用。</li><li>在npm运行，就是Node，下载好了cmd到folder，执行npm命令就行。</li><li>注意.ignore文件，否则上传一大堆。</li><li>github分支很重要，默认执行分支main，这就会出现部署到master分支，本地能成功执行hexo，但是github访问不到，去setting切换分支即可。</li><li>github pages没有实时更改内容是很正常的，发布前先<code>hexo s -p 8080</code>，本地执行没问题，先使用 <code>hexo clean</code> 清除本地缓存，然后<code>hexo g -d</code>提交。</li><li>新建文章很简单，<code>hexo new name</code> 即可。</li><li>发布照片时，要把生成的照片文件夹放到source下的img静态资源文件夹，养成良好习惯，放在post里面无法访问。</li></ol><p>  有空再去探索如何美化博客吧，本来添加了访问记录，哈哈，不知为何没成功，最近没啥时间干这事了。接下来我打算每天学英语，尚雯婕老师推荐的训练方法！然后就是学习小程序开发和Vue。加油！今天看到B站评论说，互联网行情不好，有人回复说：客观事实改变不了，那就改变自己，努力学习，顺应时代变化，接受变化，努力赶上。加油啊，Jessie！</p><p>附上参考文章链接：这个实测成功，<a href="https://blog.csdn.net/yaorongke/article/details/119089190">https://blog.csdn.net/yaorongke/article/details/119089190</a><br>这个讲了SSH，我用的就是SSH，<a href="https://github.com/pengwenwu/skill-tree/blob/master/Hexo/hexo%20%2B%20github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B.md">https://github.com/pengwenwu/skill-tree/blob/master/Hexo/hexo%20%2B%20github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B.md</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2024/09/11/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2024/09/11/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章<br>这是一篇测试文章</p><p><img src="/img/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/test.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/09/10/hello-world/"/>
    <url>/2024/09/10/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
